<?xml version="1.0" encoding="UTF-8"?>
<project>
  <actions/>
  <description>Deploy vm on qa hw.&#13;
Setup rally envirment.&#13;
Run test&#13;
Mandatory parameter: hw_number&#13;
&lt;!-- Managed by Jenkins Job Builder --&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>7</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@">
      <gitLabConnection>https://gitlab.suse.de</gitLabConnection>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    <org.jenkinsci.plugins.gitlablogo.GitlabLogoProperty plugin="gitlab-logo@">
      <repositoryName/>
    </org.jenkinsci.plugins.gitlablogo.GitlabLogoProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>hw_number</name>
          <description>Mandatory, number of the QA cloud server</description>
          <defaultValue>2</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>image_name</name>
          <description>Pre condition to have jeos image uploaded before running rally tests
</description>
          <defaultValue>jeos-64</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>scenario_name</name>
          <description>Optional; scenario name which typically is an integer with a single letter</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>scenario_job_name</name>
          <description>Optional; name of the scenario jenkins job that is used to trigger this job</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>scenario_build_number</name>
          <description>Optional; scenario build number that triggered this job</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>rally_server</name>
          <description>Server hostname where rally is setup</description>
          <defaultValue>backup.cloudadm.qa.suse.de</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.heavy__job.HeavyJobProperty plugin="heavy-job@1.1">
      <weight>1</weight>
    </hudson.plugins.heavy__job.HeavyJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>cloud-mkphyscloud-gate-qa</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
admin=crowbar$hw_number;
cloud=qa$hw_number;

# Create artifacts dir
export artifacts_dir=$WORKSPACE/.artifacts
rm -rf $artifacts_dir
mkdir -p $artifacts_dir
touch $artifacts_dir/.ignore

# Connect to rally server and run tests
ssh -T root@$rally_server "bash -s $cloud $image_name" &lt;&lt;'EOF'

cloud=$1
image_name=$2

source .openrc
# Check if jeos image already exist on cloud
openstack image show -c name --format value $image_name
image_exist=$?
# Upload jeos image
if [[ $image_exist != 0 ]]; then
    curl -s http://clouddata.cloud.suse.de/images/jeos-64.qcow2 |
openstack image create --public --disk-format qcow2 $image_name
fi
# Check if specific cloud deployemnt already exist
rally deployment list | grep $cloud
deployment_exist=$?
if [[ $deployment_exist != 0 ]]; then
    # Creat new cloud deployment env
    rally deployment create --filename $cloud-deployment.json --name $cloud
else
    # Use existing deployment
    rally deployment use $cloud
fi
# Run rally test
rally task start rally/samples/tasks/scenarios/nova/boot-and-delete.json
rally task start rally/samples/tasks/scenarios/nova/nova.json
# Generate html output
out_dir=/root/results
rm -rf $out_dir
mkdir -p /root/results
rally task results &gt; $out_dir/output.json
rally task report $out_dir/output.json --out $out_dir/output.html
EOF
ret=$?
# Copy test run reslust output to jenkins artifacts
scp root@$rally_server:/root/results/*.html $artifacts_dir
exit $ret
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>.artifacts/**</artifacts>
      <allowEmptyArchive>true</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
  </publishers>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@"/>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@">
      <template>#${BUILD_NUMBER} - ${scenario_name} - qa$hw_number - full</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>
